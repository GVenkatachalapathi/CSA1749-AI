def print_board(board):
    for row in board:
        print(" ".join("Q" if col else "." for col in row))
    print()

def is_safe(board, row, col):
    for i in range(row):
        if board[i][col]:
            return False

    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i][j]:
            return False

    for i, j in zip(range(row, -1, -1), range(col, len(board))):
        if board[i][j]:
            return False

    return True

def solve_n_queens(board, row):
    if row == len(board):
        print_board(board)
        return True

    res = False
    for col in range(len(board)):
        if is_safe(board, row, col):
            board[row][col] = 1
            res = solve_n_queens(board, row + 1) or res
            board[row][col] = 0  

    return res

def main():
    n = int(input("Enter the size of the board (N): ")) 
    board = [[0] * n for _ in range(n)]
    
    if not solve_n_queens(board, 0):
        print("No solution found.")

if __name__ == "__main__":
    main()
